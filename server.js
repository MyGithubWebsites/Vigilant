/**
 * Vigilant - Report Receiver (Express + Nodemailer)
 *
 * - Expects JSON POST to /api/report with { company, email, role, details }
 * - Sends an email to RECIPIENT_EMAIL
 * - Uses env vars for SMTP credentials
 */

require('dotenv').config();
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const nodemailer = require('nodemailer');
const validator = require('validator');

const app = express();
app.use(helmet());
app.use(cors({
  origin: '*' // change in production to your frontend origin
}));
app.use(express.json({ limit: '200kb' }));

// Basic rate limiting to prevent spam
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 10, // max 10 requests per IP / minute for demo (tune for production)
  message: { error: 'Too many requests, please try again later.' }
});
app.use('/api/', limiter);

// Load env
const {
  SMTP_HOST,
  SMTP_PORT,
  SMTP_USER,
  SMTP_PASS,
  SMTP_SECURE,
  RECIPIENT_EMAIL,
  FROM_NAME,
  FROM_EMAIL,
  PORT
} = process.env;

if (!RECIPIENT_EMAIL) {
  console.warn('WARNING: RECIPIENT_EMAIL is not set. Set RECIPIENT_EMAIL in your .env (example: pr7845871@example.com)');
}

// transporter
const transporter = nodemailer.createTransport({
  host: SMTP_HOST || 'smtp.example.com',
  port: SMTP_PORT ? parseInt(SMTP_PORT) : 587,
  secure: SMTP_SECURE === 'true' || false, // true for 465, false for other ports
  auth: {
    user: SMTP_USER || '',
    pass: SMTP_PASS || ''
  }
});

// verify transporter at startup (non-blocking)
transporter.verify().then(() => {
  console.log('SMTP transporter verified');
}).catch(err => {
  console.warn('Could not verify SMTP transporter. Check credentials. Error:', err.message || err);
});

// helper: sanitize input and limit lengths
function cleanInput(str, maxLen = 2000) {
  if (!str) return '';
  let s = String(str).trim();
  if (s.length > maxLen) s = s.slice(0, maxLen) + '...';
  return s;
}

// endpoint
app.post('/api/report', async (req, res) => {
  try {
    const { company, email, role, details } = req.body || {};

    // basic validation
    const companyClean = cleanInput(company, 200);
    const detailsClean = cleanInput(details, 4000);
    const roleClean = cleanInput(role, 200);
    const emailClean = email ? String(email).trim() : '';

    if (!companyClean || !detailsClean) {
      return res.status(400).json({ error: 'Required fields missing: company and details' });
    }
    if (emailClean && !validator.isEmail(emailClean)) {
      return res.status(400).json({ error: 'Invalid email format' });
    }

    // Build email content (HTML + text)
    const createdAt = new Date().toISOString();
    const subject = `[Vigilant Report] ${companyClean} — ${roleClean || 'No role provided'}`;

    const html = `
      <h2>New Vigilant Report</h2>
      <p><strong>Company / Recruiter:</strong> ${escapeHtml(companyClean)}</p>
      <p><strong>Job Title / Posting:</strong> ${escapeHtml(roleClean || '—')}</p>
      <p><strong>Reporter Email (if provided):</strong> ${escapeHtml(emailClean || 'Anonymous')}</p>
      <p><strong>Submitted At:</strong> ${createdAt}</p>
      <hr/>
      <h3>Details</h3>
      <p>${nl2br(escapeHtml(detailsClean))}</p>
      <hr/>
      <p>This message is generated by the Vigilant report backend.</p>
    `;

    const text = [
      'New Vigilant Report',
      `Company / Recruiter: ${companyClean}`,
      `Job Title / Posting: ${roleClean || '—'}`,
      `Reporter Email (if provided): ${emailClean || 'Anonymous'}`,
      `Submitted At: ${createdAt}`,
      '',
      'Details:',
      detailsClean,
      '',
      '---',
      'Sent by Vigilant report system'
    ].join('\n');

    // mail options
    const mailOptions = {
      from: `"${FROM_NAME || 'Vigilant'}" <${FROM_EMAIL || SMTP_USER || 'no-reply@example.com'}>`,
      to: RECIPIENT_EMAIL,
      subject,
      text,
      html
    };

    // send mail
    await transporter.sendMail(mailOptions);

    // Optionally: store to disk/DB here

    return res.json({ ok: true, message: 'Report received — emailed to the review team.' });
  } catch (err) {
    console.error('Error in /api/report', err);
    return res.status(500).json({ error: 'Server error' });
  }
});

// Health
app.get('/health', (req, res) => res.json({ status: 'ok' }));

const port = parseInt(PORT || '4000');
app.listen(port, () => console.log(`Vigilant backend listening on port ${port}`));

// small helpers
function escapeHtml(str) {
  return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}
function nl2br(str){
  return String(str).replace(/\n/g,'<br/>');
}
